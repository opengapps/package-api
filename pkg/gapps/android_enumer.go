// Code generated by "enumer -type=Android -json -transform=snake -trimprefix=Android"; DO NOT EDIT.

//
package gapps

import (
	"encoding/json"
	"fmt"
)

const _AndroidName = "445051607071808190100110"

var _AndroidIndex = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 21, 24}

func (i Android) String() string {
	if i >= Android(len(_AndroidIndex)-1) {
		return fmt.Sprintf("Android(%d)", i)
	}
	return _AndroidName[_AndroidIndex[i]:_AndroidIndex[i+1]]
}

var _AndroidValues = []Android{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

var _AndroidNameToValueMap = map[string]Android{
	_AndroidName[0:2]:   0,
	_AndroidName[2:4]:   1,
	_AndroidName[4:6]:   2,
	_AndroidName[6:8]:   3,
	_AndroidName[8:10]:  4,
	_AndroidName[10:12]: 5,
	_AndroidName[12:14]: 6,
	_AndroidName[14:16]: 7,
	_AndroidName[16:18]: 8,
	_AndroidName[18:21]: 9,
	_AndroidName[21:24]: 10,
}

// AndroidString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AndroidString(s string) (Android, error) {
	if val, ok := _AndroidNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Android values", s)
}

// AndroidValues returns all values of the enum
func AndroidValues() []Android {
	return _AndroidValues
}

// IsAAndroid returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Android) IsAAndroid() bool {
	for _, v := range _AndroidValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Android
func (i Android) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Android
func (i *Android) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Android should be a string, got %s", data)
	}

	var err error
	*i, err = AndroidString(s)
	return err
}
