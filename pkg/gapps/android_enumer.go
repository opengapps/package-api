// Code generated by "enumer -type=Android -json -transform=snake -trimprefix=Android"; DO NOT EDIT.

package gapps

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AndroidName = "445051607071808190100110120121"

var _AndroidIndex = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 21, 24, 27, 30}

const _AndroidLowerName = "445051607071808190100110120121"

func (i Android) String() string {
	if i >= Android(len(_AndroidIndex)-1) {
		return fmt.Sprintf("Android(%d)", i)
	}
	return _AndroidName[_AndroidIndex[i]:_AndroidIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AndroidNoOp() {
	var x [1]struct{}
	_ = x[Android44-(0)]
	_ = x[Android50-(1)]
	_ = x[Android51-(2)]
	_ = x[Android60-(3)]
	_ = x[Android70-(4)]
	_ = x[Android71-(5)]
	_ = x[Android80-(6)]
	_ = x[Android81-(7)]
	_ = x[Android90-(8)]
	_ = x[Android100-(9)]
	_ = x[Android110-(10)]
	_ = x[Android120-(11)]
	_ = x[Android121-(12)]
}

var _AndroidValues = []Android{Android44, Android50, Android51, Android60, Android70, Android71, Android80, Android81, Android90, Android100, Android110, Android120, Android121}

var _AndroidNameToValueMap = map[string]Android{
	_AndroidName[0:2]:        Android44,
	_AndroidLowerName[0:2]:   Android44,
	_AndroidName[2:4]:        Android50,
	_AndroidLowerName[2:4]:   Android50,
	_AndroidName[4:6]:        Android51,
	_AndroidLowerName[4:6]:   Android51,
	_AndroidName[6:8]:        Android60,
	_AndroidLowerName[6:8]:   Android60,
	_AndroidName[8:10]:       Android70,
	_AndroidLowerName[8:10]:  Android70,
	_AndroidName[10:12]:      Android71,
	_AndroidLowerName[10:12]: Android71,
	_AndroidName[12:14]:      Android80,
	_AndroidLowerName[12:14]: Android80,
	_AndroidName[14:16]:      Android81,
	_AndroidLowerName[14:16]: Android81,
	_AndroidName[16:18]:      Android90,
	_AndroidLowerName[16:18]: Android90,
	_AndroidName[18:21]:      Android100,
	_AndroidLowerName[18:21]: Android100,
	_AndroidName[21:24]:      Android110,
	_AndroidLowerName[21:24]: Android110,
	_AndroidName[24:27]:      Android120,
	_AndroidLowerName[24:27]: Android120,
	_AndroidName[27:30]:      Android121,
	_AndroidLowerName[27:30]: Android121,
}

var _AndroidNames = []string{
	_AndroidName[0:2],
	_AndroidName[2:4],
	_AndroidName[4:6],
	_AndroidName[6:8],
	_AndroidName[8:10],
	_AndroidName[10:12],
	_AndroidName[12:14],
	_AndroidName[14:16],
	_AndroidName[16:18],
	_AndroidName[18:21],
	_AndroidName[21:24],
	_AndroidName[24:27],
	_AndroidName[27:30],
}

// AndroidString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AndroidString(s string) (Android, error) {
	if val, ok := _AndroidNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AndroidNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Android values", s)
}

// AndroidValues returns all values of the enum
func AndroidValues() []Android {
	return _AndroidValues
}

// AndroidStrings returns a slice of all String values of the enum
func AndroidStrings() []string {
	strs := make([]string, len(_AndroidNames))
	copy(strs, _AndroidNames)
	return strs
}

// IsAAndroid returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Android) IsAAndroid() bool {
	for _, v := range _AndroidValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Android
func (i Android) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Android
func (i *Android) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Android should be a string, got %s", data)
	}

	var err error
	*i, err = AndroidString(s)
	return err
}
