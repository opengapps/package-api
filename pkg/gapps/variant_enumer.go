// Code generated by "enumer -type=Variant -json -transform=snake -trimprefix=Variant"; DO NOT EDIT.

//
package gapps

import (
	"encoding/json"
	"fmt"
)

const _VariantName = "tvstockpiconanomicrominifullstocksuperaromatvmini"

var _VariantIndex = [...]uint8{0, 7, 11, 15, 20, 24, 28, 33, 38, 43, 49}

func (i Variant) String() string {
	if i >= Variant(len(_VariantIndex)-1) {
		return fmt.Sprintf("Variant(%d)", i)
	}
	return _VariantName[_VariantIndex[i]:_VariantIndex[i+1]]
}

var _VariantValues = []Variant{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

var _VariantNameToValueMap = map[string]Variant{
	_VariantName[0:7]:   0,
	_VariantName[7:11]:  1,
	_VariantName[11:15]: 2,
	_VariantName[15:20]: 3,
	_VariantName[20:24]: 4,
	_VariantName[24:28]: 5,
	_VariantName[28:33]: 6,
	_VariantName[33:38]: 7,
	_VariantName[38:43]: 8,
	_VariantName[43:49]: 9,
}

// VariantString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VariantString(s string) (Variant, error) {
	if val, ok := _VariantNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Variant values", s)
}

// VariantValues returns all values of the enum
func VariantValues() []Variant {
	return _VariantValues
}

// IsAVariant returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Variant) IsAVariant() bool {
	for _, v := range _VariantValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Variant
func (i Variant) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Variant
func (i *Variant) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Variant should be a string, got %s", data)
	}

	var err error
	*i, err = VariantString(s)
	return err
}
