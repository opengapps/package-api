// Code generated by "enumer -type=Variant -json -transform=snake -trimprefix=Variant"; DO NOT EDIT.

package gapps

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _VariantName = "tvstockpiconanomicrominifullstocksuperaromatvmini"

var _VariantIndex = [...]uint8{0, 7, 11, 15, 20, 24, 28, 33, 38, 43, 49}

const _VariantLowerName = "tvstockpiconanomicrominifullstocksuperaromatvmini"

func (i Variant) String() string {
	if i >= Variant(len(_VariantIndex)-1) {
		return fmt.Sprintf("Variant(%d)", i)
	}
	return _VariantName[_VariantIndex[i]:_VariantIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VariantNoOp() {
	var x [1]struct{}
	_ = x[VariantTvstock-(0)]
	_ = x[VariantPico-(1)]
	_ = x[VariantNano-(2)]
	_ = x[VariantMicro-(3)]
	_ = x[VariantMini-(4)]
	_ = x[VariantFull-(5)]
	_ = x[VariantStock-(6)]
	_ = x[VariantSuper-(7)]
	_ = x[VariantAroma-(8)]
	_ = x[VariantTvmini-(9)]
}

var _VariantValues = []Variant{VariantTvstock, VariantPico, VariantNano, VariantMicro, VariantMini, VariantFull, VariantStock, VariantSuper, VariantAroma, VariantTvmini}

var _VariantNameToValueMap = map[string]Variant{
	_VariantName[0:7]:        VariantTvstock,
	_VariantLowerName[0:7]:   VariantTvstock,
	_VariantName[7:11]:       VariantPico,
	_VariantLowerName[7:11]:  VariantPico,
	_VariantName[11:15]:      VariantNano,
	_VariantLowerName[11:15]: VariantNano,
	_VariantName[15:20]:      VariantMicro,
	_VariantLowerName[15:20]: VariantMicro,
	_VariantName[20:24]:      VariantMini,
	_VariantLowerName[20:24]: VariantMini,
	_VariantName[24:28]:      VariantFull,
	_VariantLowerName[24:28]: VariantFull,
	_VariantName[28:33]:      VariantStock,
	_VariantLowerName[28:33]: VariantStock,
	_VariantName[33:38]:      VariantSuper,
	_VariantLowerName[33:38]: VariantSuper,
	_VariantName[38:43]:      VariantAroma,
	_VariantLowerName[38:43]: VariantAroma,
	_VariantName[43:49]:      VariantTvmini,
	_VariantLowerName[43:49]: VariantTvmini,
}

var _VariantNames = []string{
	_VariantName[0:7],
	_VariantName[7:11],
	_VariantName[11:15],
	_VariantName[15:20],
	_VariantName[20:24],
	_VariantName[24:28],
	_VariantName[28:33],
	_VariantName[33:38],
	_VariantName[38:43],
	_VariantName[43:49],
}

// VariantString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VariantString(s string) (Variant, error) {
	if val, ok := _VariantNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VariantNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Variant values", s)
}

// VariantValues returns all values of the enum
func VariantValues() []Variant {
	return _VariantValues
}

// VariantStrings returns a slice of all String values of the enum
func VariantStrings() []string {
	strs := make([]string, len(_VariantNames))
	copy(strs, _VariantNames)
	return strs
}

// IsAVariant returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Variant) IsAVariant() bool {
	for _, v := range _VariantValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Variant
func (i Variant) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Variant
func (i *Variant) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Variant should be a string, got %s", data)
	}

	var err error
	*i, err = VariantString(s)
	return err
}
