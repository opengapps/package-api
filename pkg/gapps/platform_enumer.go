// Code generated by "enumer -type=Platform -json -transform=snake -trimprefix=Platform"; DO NOT EDIT.

package gapps

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PlatformName = "armarm64x86x86_64"

var _PlatformIndex = [...]uint8{0, 3, 8, 11, 17}

const _PlatformLowerName = "armarm64x86x86_64"

func (i Platform) String() string {
	if i >= Platform(len(_PlatformIndex)-1) {
		return fmt.Sprintf("Platform(%d)", i)
	}
	return _PlatformName[_PlatformIndex[i]:_PlatformIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PlatformNoOp() {
	var x [1]struct{}
	_ = x[PlatformArm-(0)]
	_ = x[PlatformArm64-(1)]
	_ = x[PlatformX86-(2)]
	_ = x[PlatformX86_64-(3)]
}

var _PlatformValues = []Platform{PlatformArm, PlatformArm64, PlatformX86, PlatformX86_64}

var _PlatformNameToValueMap = map[string]Platform{
	_PlatformName[0:3]:        PlatformArm,
	_PlatformLowerName[0:3]:   PlatformArm,
	_PlatformName[3:8]:        PlatformArm64,
	_PlatformLowerName[3:8]:   PlatformArm64,
	_PlatformName[8:11]:       PlatformX86,
	_PlatformLowerName[8:11]:  PlatformX86,
	_PlatformName[11:17]:      PlatformX86_64,
	_PlatformLowerName[11:17]: PlatformX86_64,
}

var _PlatformNames = []string{
	_PlatformName[0:3],
	_PlatformName[3:8],
	_PlatformName[8:11],
	_PlatformName[11:17],
}

// PlatformString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlatformString(s string) (Platform, error) {
	if val, ok := _PlatformNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PlatformNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Platform values", s)
}

// PlatformValues returns all values of the enum
func PlatformValues() []Platform {
	return _PlatformValues
}

// PlatformStrings returns a slice of all String values of the enum
func PlatformStrings() []string {
	strs := make([]string, len(_PlatformNames))
	copy(strs, _PlatformNames)
	return strs
}

// IsAPlatform returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Platform) IsAPlatform() bool {
	for _, v := range _PlatformValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Platform
func (i Platform) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Platform
func (i *Platform) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Platform should be a string, got %s", data)
	}

	var err error
	*i, err = PlatformString(s)
	return err
}
